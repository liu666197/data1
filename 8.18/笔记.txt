import math
math: 数学有关的模块
pow(x,y): x的y次幂

pi : 表示π

面试题: 请实现一个单例????

单例: 无论生成几个对象,这几个对象都是指同一个对象

多人协同合作

数据库: 存储数据的

两个员工A(存了10条)和B(存了20条)
每次存数据之前,就应该获取数据库对象;每次创建的数据库应该是只有一个数据库

p = Person()

1.开辟了一片空间,默认执行__init__方法
2.将内存地址赋值给了self
3.将内存地址赋值给了函数的调用者

__init__: 构造函数(错误)  对象的初始化方法

对象的开辟一片空间的操作,是__new__方法做的

魔方方法: __单词__

段子: 程序员没有对象怎么办? new一个

我们生成的每个对象都有一个父类(object)

文件系统: python操作文件  (文件的读写)

爬虫:      数据 --> 保存(excel,数据库,json文件)

数据分析:  数据  --> 读取

打开文件:

file = open(filepath,mode,encoding)

file: 句柄 (通过它来操作该文件)

filepath: 文件路径

相对路径: 相当于当前文件所在的文件夹位置,不以盘符开头,直接写文件名字即可(读取的文件必须和py文件同一个文件夹)

绝对路径: 文件在你自己电脑中的位置,一般以盘符(/)开头 (使用较少)


mode: 模式 (读或者写)  r(读),w(写)

encoding: 文件编码  (utf-8)

\: 转义字符

读模式: r

file.read(n): 读取所有内容 (n如果有值,就是读取几个字节的数据)

file.readable(): 是否为读模式

file.readline(): 读取一行(包含末尾的换行)

file.readlines(): 结果是一个列表,列表里面的每个元素是每行的内容

打开大文件的时候,一次性打开可能导致电脑崩溃,文件10G,内存4G

遍历句柄: 每次只读取一行内容

写模式: w  (覆盖原来的内容)
file.writeable(): 是否为写模式

file.write(s): 直接写入内容  s: 字符串格式

file.writelines(list): 写入列表当中的每个内容

追加模式: a (把内容添加到文件的末尾)

在文件的最后,得关闭文件: 句柄.close()

练习: 通过代码的方法,把笔记.txt复制为笔记1.txt!!!

with语句可以操作文件: 自带了文件关闭操作

格式:

with open(filepath,mode,encoding) as file:
	文件的操作区域


数据持久化: 将数据保存到本地文件

csv存储: 将数据存在表格里面 (后缀名是csv)

正则: 正则表达式  处理字符串  描述一套规则,按照该规则查找在字符串当中满足要求的内容

13,14,15,17,18  后面必须接9位数字

字母或者数字@字母或者数字.com

正则的特点: 快   re

1232wqew1232qewewqew2133weer

正则的方法:

查找的方法:

re.match(pattern,string,flag): 查下标  从第一位开始就匹配规则

pattern: 规则

string: 要处理的字符串

flag: 选项,可写可不写  re.I : 忽略大小写

re.search(pattern,string,flag): 查找下标

规则的语法:
[]: 或者  [abc]: a或者b或者c

[0-9] : 数字
[a-z]: 所有的小写字母
[A-Z]: 所有的大写字母
[0-9a-zA-Z]: 所有的数字或者字母
[^]: 非
[^0-9]: 非数字

| : 或者   0|1|2|3  (必须罗列出所有的值)

量词: {}  表示数量  一般写在后面

{n}: 代表n个
{n,}: 大于等于n个
{n,m}: n-m个

转义字符: \开头的符号

\d : 所有的数字 [0-9]
\D : 非数字  [^0-9]

\w : 数字字母下划线  [0-9a-zA-Z_]
\W : 非数字字母下划线

\s : 空格或者换行

\S : 非空格或者非换行

表示量词的符号:

* : 大于等于0个  {0,}

+ : 大于等于1个  {1,}

? : 要不然没有,要不然只有1个 相当于{0,1}

字符串前面加r:r'' 字符串里面的内容不被转义,不再需要加\

. : 匹配任意字符除换行以外

flag: 选项,可写可不写  re.I : 忽略大小写  re.S : 让.也能匹配到换行

当需要匹配的符号在正则当中有特殊的含义,只需要在符号前面加上/即可表示该符号原来的意思

^: 以..开头 (在[]里面,非的意思)

$: 以...结尾

匹配手机号

写正则依赖: 拆

11位
13 14 15 17 18 

描述手机号的规则
1.1开头      (第1位)    1
2.3,4,5,7,8  (第2位)   [34578]
3.最后9位全部都是数字   \d{9}

1[34578]\d{9}

在进行匹配的时候,规则写完之后,在前面加^,在最后加$

座机号的匹配:
座机号:
7位的号码

区号-7位的号码

区号: 010 011  0100 0111 0123

区号:
第1位: 0
从第2位开始: 要不然是2个数字,要不然是3个数字
\d{2,3}

7位号码: \d{7}


座机号: ^(0\d{2,3}-)?\d{7}$


对于你们,是从字符串当中,取出符合要求的数据

re.findall(pattern,string,flag): 从字符串里面,查找所有符号规则的内容

返回值是列表,列表中的每个元素就是我们需要的数据

正则的贪婪模式: .+ (只要符合规则,就能匹配,匹配的越多越好)

非贪婪模式: 匹配到第一个符合规则的内容就结束   .+?

<a href="http://news.baidu.com" target="_blank" class="mnav c-font-normal c-color-t">新闻</a>
<a href="https://www.hao123.com" target="_blank" class="mnav c-font-normal c-color-t">hao123</a>