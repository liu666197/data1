sum(列表或者元组): 求和函数
max()
min()

python: 面向对象的编程语言

一切皆对象

编程思想:

面向过程: C语言 每一步代码都程序员自己实现,如果一行代码出错,整个程序崩溃

面向对象: python,php,java,js 把一些功能让一些对象去实现,如果功能有问题,那仅仅是该功能实现不了,不会导致整个程序的崩溃

列表: append()

特点: 只管使用,不管实现

举例子理解:

西红柿炒鸡蛋

面向过程: 洗锅 --> 倒油 --> 炒蛋 --> 把蛋装起来 --> 放西红柿 --> 炒熟 --> 加鸡蛋 --> 放调料 --> 大火翻炒 --> 出锅 --> 吃上了

面向对象: 找个厨师,让他做 --> 吃上了


对象的两个重要知识点: 属性,方法

属性: 对象.属性名

方法: 对象.方法名()

假设,对象是人
属性: 对象的特征 (身高,体重,肤色,性别,名字..)

方法: 对象的行为 (吃饭,睡觉,打球..)

我们主要学习的是如何造对象,我们以前为什么能去使用列表,元组,字典的方法..

类(class): 对象是由类产生的

类和对象的关系: 类(设计的图纸)  --> 对象(飞机,坦克..)

对象的属性和方法都会写在类里面

造对象(人):

创建类:
类名: 首字母是大写
class 类名:

创建对象: 类名()

人:

属性: 名字,性别,身高,体重

设置属性:
对象.属性名 = 属性值

获取属性:
对象.属性名

方法的写法: 本质是函数,但是如果该函数写到了类里面,就被称之为方法了,第一个参数是self(代表创建的对象)

属性写的位置: 在__init__方法里面

p = Person() 做了哪些事情?
1.开辟了一片新的空间,来存储该对象

2.将该空间的内存地址赋值给了self,self(代表创建的对象)

3.将该空间的内存地址返回给了调用者

方法: 把函数写在了类里面 (实现对象的行为)

方法的调用: 对象.方法名()

属性: 描述对象的特征(写到__init__方法里面)

方法: 描述对象的行为(把函数写在类里面)

练习:

创建一个学生类 (两个对象)
属性:
	名字,性别,年龄,身高,成绩
方法:
	吃,睡,考试

创建一个工人类 (两个对象)
属性:
	名字,性别,年龄,身高,薪资
方法:
	吃,睡,上班

创建一个医生类
属性: 
	名字,性别,年龄,身高,是否为主治医师
方法:
	吃,睡,手术

面向对象的三大特性:

1.封装

2.继承: 子类对象继承父类对象的属性和方法 (节约代码空间)

3.多态(没有多态)

继承的格式:

class 子类(父类):

子类: 派生类

父类: 超类或者基类

方法的重写: 当父类对象的方法不足以满足子类对象的需求的时候,会选择在子类当中重新实现一遍该方法

方法的执行顺序(继承的前提下): 先从本类当中查找有无当前方法,如果有,则调用本类的;如果没有,调用父类的方法\



父类: 放置一些相同的属性和方法

子类: 继承父类

如果要给子类添加不同的属性,重写__init__方法,并且把参数也写上,在__init__方法里面,先调用父类的__init__方法:
super().__init__(参数)
再给自己添加不同的属性
self.属性名 = 属性值

多继承: 可以继承多个父类

class 子类(父类1,父类2..)

使用类名的方法调用父类的方法的时候,得把self传递过去:

父类名.__init__(self)

self的指向: 谁调用方法,self就指向谁

方法的调用: 先从本类中找方法,本类中没有,找父类中的方法

继承: 不要瞎继承..

type和isinstance()的区别???

isinstance(o,t): 判断o是一个什么类型(t)

type: 就判断一个数据(对象)是否属于哪种类型

isinstance(o,t): 也是判断数据类型的,子类对象也会认为属于父类对象的类型


面向对象的三大特性:
1.封装

2.继承: 子类对象继承父类对象的属性和方法(重点: 方法的执行顺序,self的指向)

3.多态: python当中是没有多态  (多种形态)

多态: 父类指针指向子类对象

a = 10
b = 20
int a = 10;

def sayHello(A a):
	函数体

sayHello(b)

int a = 10

A a = A()

A b = B()


请描述实例属性和类属性的区别,实例方法和类方法的区别?

属性:

实例属性:  对象的属性(self.name)

类属性:    类的属性

区别: 
实例属性的设置: 对象名.属性名 = 值

类属性的设置: 在类里面写变量

实例属性的获取: 对象名.属性名

类属性的获取: 类名.属性名


如果要调用实例属性或者实例方法,必须创建对象;那么类属性和类方法,是可以直接使用的,一般用在属性和方法和对象之间没什么关系的时候



实例方法: 在class里面写函数   调用: 对象.方法名()

类方法: 在class里面写函数  在函数上面加上@classmethod (cls: 类名)  类名.方法名()

在函数上方加上@单词: 装饰器 (给函数添加一些额外的功能)

公有属性和公有方法: 属性和方法可以在类里面或者类外面访问

私有属性和私有方法: 属性和方法只能在类里面访问

格式: __单词

魔法方法: 属性python给我们提供的方法:  __单词__  (不是人为调用,是在进行面向对象操作的时候,自行调用)

__init__: 实例化对象的时候,默认调用__init__方法

重点:
1.如何造对象
2.继承
3.self的指向,方法的执行顺序
4.各种属性,各种方法的定义