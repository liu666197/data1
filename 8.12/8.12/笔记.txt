数据类型: 数字(int,float) 布尔(bool) 字符串(str)  列表(list) 字典(dict)  元组 (tuple) 集合 {set}

函数: 实现某种功能

内置函数: python给我们提供的函数 print() input() int() type()

自己写的函数: 自己把功能代码整合到一起,作为函数,以后可以直接使用

列表去重

函数:

定义函数: 设置功能  (函数名: 体现该函数的功能;函数体: 真实实现函数功能的代码)  不会执行该功能

函数名和变量名的命名规则是一样的

def 函数名():
	函数体



函数调用: 使用功能

格式: 函数名()


封装函数: 把一些相同的代码,需要重复执行的代码,会放到一个函数里面,以后就通过函数的调用来执行该代码即可

函数的特点: 重用 (重复使用) 可以使代码层次分明,减少一定的代码量

函数式编程: 将项目中的每一个功能都写成一个函数

查找函数的源代码: 按住ctrl键,点击函数名即可

函数的参数: 括号里面的内容,多个参数中间逗号隔开

形参: 一般写在函数定义里面,变量名的形式存在 (本质就是变量)

实参: 一般写在函数调用里面,数据的形式存在

形参和实参,一一对应,实参一般是给形参进行赋值操作的

什么时候需要形参?
一般在实现某些类似的功能的时候,有一些数值不太一样,考虑通过形参的方式去定义函数,在函数调用的时候,把对应数值传递进去即可

函数的返回值: 调用函数以后,给函数的调用者一个结果:

def 函数名():
	函数体
	return 返回值

return 如果不写,默认为None; 函数遇到return 就终止

什么时候需要返回值?
看实现的功能是怎么样,如果实现的功能需要一个结果,那么就写上返回值

练习:
1. [12,12,234,32,32,234] [13,14,123,13,14,234] [1,1,1,1,324,23,4,32,2,2] (实现列表去重操作)

结果: 直接运行,就打印出三个列表去重后的效果

2. [12,12,234,32,32,234] [13,14,123,13,14,234] [1,1,1,1,324,23,4,32,2,2]

结果: 直接运行,就打印出三个列表排序后的效果 (冒泡排序,选择排序)

3. 求1-100,500-1000,3000-5000的和


函数参数的分类:

必要(位置)参数: 形参和实参必须一一对应

默认(缺省)参数: 不传递值的时候有默认值,传递参数的时候会将默认值覆盖掉

混合参数: 必要参数在默认参数之前

关键字参数 (针对于实参的传递来说)

不定长参数: 参数的个数不定,可以随意有很多个参数

*args
* : 不定长 (多个)
args: 参数的名字 (数据类型属于元组,元组里面的数据就是每一个实参的值)

不定长关键字参数: 无数个关键字参数
**kwargs:
kwargs: 是一个字典,保存了关键字参数的名字和值

不定长的混合参数: *args在前,**kwargs在后


python的内置函数:

max(多个参数或者列表): 求最大值

min(多个参数或者列表): 求最小值

通过学过的知识点,自己实现max()和min()函数;

变量的分类:

全局变量: 定义在函数外面的变量  在任意地方都能使用该变量

局部变量: 定义在函数里面的变量  只在该函数里面可以使用该变量

所有的形参都是局部变量

想在函数内部修改全局变量的值,只需要进行一个变量声明即可

变量声明: 变量属于什么类型的变量  

全局变量的声明: global 变量名
